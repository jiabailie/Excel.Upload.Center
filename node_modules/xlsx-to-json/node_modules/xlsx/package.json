{
  "name": "xlsx",
  "version": "0.3.10",
  "author": {
    "name": "sheetjs"
  },
  "description": "(one day) a full-featured XLSX parser and writer.  For now, primitive parser",
  "keywords": [
    "xlsx",
    "office",
    "excel",
    "spreadsheet"
  ],
  "bin": {
    "xlsx2csv": "./bin/xlsx2csv.njs"
  },
  "main": "./xlsx",
  "dependencies": {
    "ssf": ">=0.1.1",
    "codepage": "",
    "commander": ""
  },
  "devDependencies": {
    "mocha": "",
    "jasmine-node": "x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-xlsx.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make mocha",
    "test-jasmine": "jasmine-node --verbose tests/"
  },
  "config": {
    "blanket": {
      "pattern": "xlsx.js"
    }
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-xlsx/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# xlsx\n\nCurrently a parser for XLSX and XLSM files.  Cleanroom implementation from the \nISO 29500  Office Open XML specifications and related documents.\n\n## Installation\n\nIn node:\n\n    npm install xlsx\n\nIn the browser:\n\n    <!-- JSZip must be included before xlsx.js -->\n    <script lang=\"javascript\" src=\"/path/to/jszip.js\"></script>\n    <script lang=\"javascript\" src=\"/path/to/xlsx.js\"></script>\n\n## Usage\n\nThe node version installs a binary `xlsx2csv` which can read XLSX/XLSM files and output the contents in various formats.  The source is available at `xlsx2csv.njs` in the bin directory.\n\nSee <http://oss.sheetjs.com/js-xlsx/> for a browser example. \n\nNote that older versions of IE does not support HTML5 File API, so the base64 mode is provided for testing.  On OSX you can get the base64 encoding by running:\n\n    $ <target_file.xlsx base64 | pbcopy # the pbcopy puts the content in the clipboard\n\nSimple usage (walks through every cell of every sheet and dumps the values):\n\n    var XLSX = require('xlsx')\n    var xlsx = XLSX.readFile('test.xlsx');\n    var sheet_name_list = xlsx.SheetNames;\n    xlsx.SheetNames.forEach(function(y) {\n      for (z in xlsx.Sheets[y]) {\n        if(z[0] === '!') continue;\n        console.log(y + \"!\" + z + \"=\" + JSON.stringify(xlsx.Sheets[y][z].v));\n      }\n    });\n\nSome helper functions in `XLSX.utils` generate different views of the sheets:\n\n- `XLSX.utils.sheet_to_csv` generates CSV \n- `XLSX.utils.sheet_to_row_object_array` interprets sheets as tables with a header column and generates an array of objects\n- `XLSX.utils.get_formulae` generates a list of formulae\n\n## Notes \n\n`.SheetNames` is an ordered list of the sheets in the workbook\n\n`.Sheets[sheetname]` returns a data structure representing the sheet.  Each key\nthat does not start with `!` corresponds to a cell (using `A-1` notation).  \n\n`.Sheets[sheetname][address].v` returns the value of the specified cell and `.Sheets[sheetname][address].t` returns the type of the cell (constrained to the enumeration `ST_CellType` as documented in page 4215 of ISO/IEC 29500-1:2012(E) ) \n\nFor more details:\n\n- `bin/xlsx2csv.njs` is a tool for node\n- `index.html` is the live demo\n- `bits/90_utils.js` contains the logic for generating CSV and JSON from sheets\n\n## Tested Environments\n\n - Node 0.8.14, 0.10.1\n - IE 6/7/8/9/10 using Base64 mode (IE10 using HTML5 mode)\n - FF 18 using Base64 or HTML5 mode\n - Chrome 24 using Base64 or HTML5 mode\n\nTests utilize the mocha testing framework.  Travis-CI and Sauce Labs links:\n\n - <https://travis-ci.org/SheetJS/js-xlsx> for XLSX module in node\n - <https://travis-ci.org/SheetJS/SheetJS.github.io> for XLS* modules\n - <https://saucelabs.com/u/sheetjs> for XLS* modules using Sauce Labs \n\n## Test Files\n\nTest files are housed in [another repo](https://github.com/SheetJS/test_files).\n\n## XLS Support\n\nXLS is available in [js-xls](https://github.com/SheetJS/js-xls).\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly granted by the Apache 2.0 license are reserved by the Original Author.\n\nIt is the opinion of the Original Author that this code conforms to the terms of the Microsoft Open Specifications Promise, falling under the same terms as OpenOffice (which is governed by the Apache License v2).  Given the vagaries of the promise, the Original Author makes no legal claim that in fact end users are protected from future actions.  It is highly recommended that, for commercial uses, you consult a lawyer before proceeding.\n\n## References\n\nISO/IEC 29500:2012(E) \"Information technology — Document description and processing languages — Office Open XML File Formats\"\n\nOSP-covered specifications:\n\n - [MS-XLSX]: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format\n\n## Badges\n\n[![Build Status](https://travis-ci.org/SheetJS/js-xlsx.png?branch=master)](https://travis-ci.org/SheetJS/js-xlsx)\n\n[![Coverage Status](https://coveralls.io/repos/SheetJS/js-xlsx/badge.png?branch=master)](https://coveralls.io/r/SheetJS/js-xlsx?branch=master)\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/ed5bb2c4c4346a474fef270f847f3f78 \"githalytics.com\")](http://githalytics.com/SheetJS/js-xlsx)\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SheetJS/js-xlsx",
  "_id": "xlsx@0.3.10",
  "_from": "xlsx@~0.3.6"
}
